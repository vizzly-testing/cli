/**
 * Project management commands
 * Select, list, and manage project tokens
 */

import { ConsoleUI } from '../utils/console-ui.js';
import { AuthService } from '../services/auth-service.js';
import { getApiUrl } from '../utils/environment-config.js';
import {
  getAuthTokens,
  saveProjectMapping,
  getProjectMapping,
  getProjectMappings,
  deleteProjectMapping,
} from '../utils/global-config.js';
import { resolve } from 'path';
import readline from 'readline';

/**
 * Project select command - configure project for current directory
 * @param {Object} options - Command options
 * @param {Object} globalOptions - Global CLI options
 */
export async function projectSelectCommand(options = {}, globalOptions = {}) {
  let ui = new ConsoleUI({
    json: globalOptions.json,
    verbose: globalOptions.verbose,
    color: !globalOptions.noColor,
  });

  try {
    // Check authentication
    let auth = await getAuthTokens();
    if (!auth || !auth.accessToken) {
      ui.error('Not authenticated', null, 0);
      console.log(''); // Empty line for spacing
      ui.info('Run "vizzly login" to authenticate first');
      process.exit(1);
    }

    let authService = new AuthService({
      baseUrl: options.apiUrl || getApiUrl(),
    });

    // Get user info to show organizations
    ui.startSpinner('Fetching organizations...');
    let userInfo = await authService.whoami();
    ui.stopSpinner();

    if (!userInfo.organizations || userInfo.organizations.length === 0) {
      ui.error('No organizations found', null, 0);
      console.log(''); // Empty line for spacing
      ui.info('Create an organization at https://vizzly.dev');
      process.exit(1);
    }

    // Select organization
    console.log(''); // Empty line for spacing
    ui.info('Select an organization:');
    console.log(''); // Empty line for spacing

    userInfo.organizations.forEach((org, index) => {
      console.log(`  ${index + 1}. ${org.name} (@${org.slug})`);
    });

    console.log(''); // Empty line for spacing
    let orgChoice = await promptNumber(
      'Enter number',
      1,
      userInfo.organizations.length
    );
    let selectedOrg = userInfo.organizations[orgChoice - 1];

    // List projects for organization
    ui.startSpinner(`Fetching projects for ${selectedOrg.name}...`);

    let response = await makeAuthenticatedRequest(
      `${options.apiUrl || getApiUrl()}/api/project`,
      {
        headers: {
          Authorization: `Bearer ${auth.accessToken}`,
          'X-Organization': selectedOrg.slug,
        },
      }
    );

    ui.stopSpinner();

    // Handle both array response and object with projects property
    let projects = Array.isArray(response) ? response : response.projects || [];

    if (projects.length === 0) {
      ui.error('No projects found', null, 0);
      console.log(''); // Empty line for spacing
      ui.info(`Create a project in ${selectedOrg.name} at https://vizzly.dev`);
      process.exit(1);
    }

    // Select project
    console.log(''); // Empty line for spacing
    ui.info('Select a project:');
    console.log(''); // Empty line for spacing

    projects.forEach((project, index) => {
      console.log(`  ${index + 1}. ${project.name} (${project.slug})`);
    });

    console.log(''); // Empty line for spacing
    let projectChoice = await promptNumber('Enter number', 1, projects.length);
    let selectedProject = projects[projectChoice - 1];

    // Create API token for project
    ui.startSpinner(`Creating API token for ${selectedProject.name}...`);

    let tokenResponse = await makeAuthenticatedRequest(
      `${options.apiUrl || getApiUrl()}/api/project/${selectedProject.slug}/tokens`,
      {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${auth.accessToken}`,
          'X-Organization': selectedOrg.slug,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: `CLI Token - ${new Date().toLocaleDateString()}`,
          description: `Generated by vizzly CLI for ${process.cwd()}`,
        }),
      }
    );

    ui.stopSpinner();

    // Save project mapping
    let currentDir = resolve(process.cwd());
    await saveProjectMapping(currentDir, {
      token: tokenResponse.token,
      projectSlug: selectedProject.slug,
      projectName: selectedProject.name,
      organizationSlug: selectedOrg.slug,
    });

    ui.success('Project configured!');
    console.log(''); // Empty line for spacing
    ui.info(`Project: ${selectedProject.name}`);
    ui.info(`Organization: ${selectedOrg.name}`);
    ui.info(`Directory: ${currentDir}`);

    ui.cleanup();
  } catch (error) {
    ui.stopSpinner();
    ui.error('Failed to configure project', error, 0);
    if (globalOptions.verbose && error.stack) {
      console.error(''); // Empty line for spacing
      console.error(error.stack);
    }
    process.exit(1);
  }
}

/**
 * Project list command - show all configured projects
 * @param {Object} _options - Command options (unused)
 * @param {Object} globalOptions - Global CLI options
 */
export async function projectListCommand(_options = {}, globalOptions = {}) {
  let ui = new ConsoleUI({
    json: globalOptions.json,
    verbose: globalOptions.verbose,
    color: !globalOptions.noColor,
  });

  try {
    let mappings = await getProjectMappings();
    let paths = Object.keys(mappings);

    if (paths.length === 0) {
      ui.info('No projects configured');
      console.log(''); // Empty line for spacing
      ui.info('Run "vizzly project:select" to configure a project');
      ui.cleanup();
      return;
    }

    if (globalOptions.json) {
      ui.data(mappings);
      ui.cleanup();
      return;
    }

    ui.info('Configured projects:');
    console.log(''); // Empty line for spacing

    let currentDir = resolve(process.cwd());

    for (let path of paths) {
      let mapping = mappings[path];
      let isCurrent = path === currentDir;
      let marker = isCurrent ? 'â†’' : ' ';

      // Extract token string (handle both string and object formats)
      let tokenStr =
        typeof mapping.token === 'string'
          ? mapping.token
          : mapping.token?.token || '[invalid token]';

      console.log(`${marker} ${path}`);
      console.log(`  Project: ${mapping.projectName} (${mapping.projectSlug})`);
      console.log(`  Organization: ${mapping.organizationSlug}`);
      if (globalOptions.verbose) {
        console.log(`  Token: ${tokenStr.substring(0, 20)}...`);
        console.log(
          `  Created: ${new Date(mapping.createdAt).toLocaleString()}`
        );
      }
      console.log(''); // Empty line for spacing
    }

    ui.cleanup();
  } catch (error) {
    ui.error('Failed to list projects', error, 0);
    if (globalOptions.verbose && error.stack) {
      console.error(''); // Empty line for spacing
      console.error(error.stack);
    }
    process.exit(1);
  }
}

/**
 * Project token command - show/regenerate token for current directory
 * @param {Object} _options - Command options (unused)
 * @param {Object} globalOptions - Global CLI options
 */
export async function projectTokenCommand(_options = {}, globalOptions = {}) {
  let ui = new ConsoleUI({
    json: globalOptions.json,
    verbose: globalOptions.verbose,
    color: !globalOptions.noColor,
  });

  try {
    let currentDir = resolve(process.cwd());
    let mapping = await getProjectMapping(currentDir);

    if (!mapping) {
      ui.error('No project configured for this directory', null, 0);
      console.log(''); // Empty line for spacing
      ui.info('Run "vizzly project:select" to configure a project');
      process.exit(1);
    }

    // Extract token string (handle both string and object formats)
    let tokenStr =
      typeof mapping.token === 'string'
        ? mapping.token
        : mapping.token?.token || '[invalid token]';

    if (globalOptions.json) {
      ui.data({
        token: tokenStr,
        projectSlug: mapping.projectSlug,
        organizationSlug: mapping.organizationSlug,
      });
      ui.cleanup();
      return;
    }

    ui.info('Project token:');
    console.log(''); // Empty line for spacing
    console.log(`  ${tokenStr}`);
    console.log(''); // Empty line for spacing
    ui.info(`Project: ${mapping.projectName} (${mapping.projectSlug})`);
    ui.info(`Organization: ${mapping.organizationSlug}`);

    ui.cleanup();
  } catch (error) {
    ui.error('Failed to get project token', error, 0);
    if (globalOptions.verbose && error.stack) {
      console.error(''); // Empty line for spacing
      console.error(error.stack);
    }
    process.exit(1);
  }
}

/**
 * Helper to make authenticated API request
 */
async function makeAuthenticatedRequest(url, options = {}) {
  let response = await fetch(url, options);

  if (!response.ok) {
    let errorText = '';
    try {
      let errorData = await response.json();
      errorText = errorData.error || errorData.message || '';
    } catch {
      errorText = await response.text();
    }
    throw new Error(
      `API request failed: ${response.status}${errorText ? ` - ${errorText}` : ''}`
    );
  }

  return response.json();
}

/**
 * Helper to prompt for a number
 */
function promptNumber(message, min, max) {
  return new Promise(resolve => {
    let rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    let ask = () => {
      rl.question(`${message} (${min}-${max}): `, answer => {
        let num = parseInt(answer, 10);
        if (isNaN(num) || num < min || num > max) {
          console.log(`Please enter a number between ${min} and ${max}`);
          ask();
        } else {
          rl.close();
          resolve(num);
        }
      });
    };

    ask();
  });
}

/**
 * Project remove command - remove project configuration for current directory
 * @param {Object} _options - Command options (unused)
 * @param {Object} globalOptions - Global CLI options
 */
export async function projectRemoveCommand(_options = {}, globalOptions = {}) {
  let ui = new ConsoleUI({
    json: globalOptions.json,
    verbose: globalOptions.verbose,
    color: !globalOptions.noColor,
  });

  try {
    let currentDir = resolve(process.cwd());
    let mapping = await getProjectMapping(currentDir);

    if (!mapping) {
      ui.info('No project configured for this directory');
      ui.cleanup();
      return;
    }

    // Confirm removal
    console.log(''); // Empty line for spacing
    ui.info('Current project configuration:');
    console.log(`  Project: ${mapping.projectName} (${mapping.projectSlug})`);
    console.log(`  Organization: ${mapping.organizationSlug}`);
    console.log(`  Directory: ${currentDir}`);
    console.log(''); // Empty line for spacing

    let confirmed = await promptConfirm('Remove this project configuration?');

    if (!confirmed) {
      ui.info('Cancelled');
      ui.cleanup();
      return;
    }

    await deleteProjectMapping(currentDir);

    ui.success('Project configuration removed');
    console.log(''); // Empty line for spacing
    ui.info('Run "vizzly project:select" to configure a different project');

    ui.cleanup();
  } catch (error) {
    ui.error('Failed to remove project configuration', error, 0);
    if (globalOptions.verbose && error.stack) {
      console.error(''); // Empty line for spacing
      console.error(error.stack);
    }
    process.exit(1);
  }
}

/**
 * Helper to prompt for confirmation
 */
function promptConfirm(message) {
  return new Promise(resolve => {
    let rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout,
    });

    rl.question(`${message} (y/n): `, answer => {
      rl.close();
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
    });
  });
}

/**
 * Validate project command options
 */
export function validateProjectOptions() {
  return [];
}
